// Generated 09 Apr 2024 11:36 - Singular Systems Object Generator Version 3.0.000
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace MEWeb.Movies
{
  [Serializable]
  public class LoginAudit
  : SingularBusinessBase<LoginAudit>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> LoginAuditIDProperty = RegisterProperty<int>(c => c.LoginAuditID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int LoginAuditID
    {
      get { return GetProperty(LoginAuditIDProperty); }
    }

    public static PropertyInfo<int?> UserIDProperty = RegisterProperty<int?>(c => c.UserID, "User", null);
    /// <summary>
    /// Gets and sets the User value
    /// </summary>
    [Display(Name = "User", Description = "USerID ex User table"),
    Required(ErrorMessage = "User required")]
    public int? UserID
    {
      get { return GetProperty(UserIDProperty); }
      set { SetProperty(UserIDProperty, value); }
    }

    public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date");
    /// <summary>
    /// Gets the Created Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDate
    {
      get { return GetProperty(CreatedDateProperty); }
    }

    public static PropertyInfo<string> MachineNameProperty = RegisterProperty<string>(c => c.MachineName, "Machine Name", "");
    /// <summary>
    /// Gets and sets the Machine Name value
    /// </summary>
    [Display(Name = "Machine Name", Description = ""),
    StringLength(128, ErrorMessage = "Machine Name cannot be more than 128 characters")]
    public string MachineName
    {
      get { return GetProperty(MachineNameProperty); }
      set { SetProperty(MachineNameProperty, value); }
    }

    public static PropertyInfo<string> WindowsNameProperty = RegisterProperty<string>(c => c.WindowsName, "Windows Name", "");
    /// <summary>
    /// Gets and sets the Windows Name value
    /// </summary>
    [Display(Name = "Windows Name", Description = ""),
    StringLength(128, ErrorMessage = "Windows Name cannot be more than 128 characters")]
    public string WindowsName
    {
      get { return GetProperty(WindowsNameProperty); }
      set { SetProperty(WindowsNameProperty, value); }
    }

    public static PropertyInfo<int> LoginTypeProperty = RegisterProperty<int>(c => c.LoginType, "Login Type", 0);
    /// <summary>
    /// Gets and sets the Login Type value
    /// </summary>
    [Display(Name = "Login Type", Description = "0 = Incorrect Password / User Name, 1 = Successfull, 2 = Locked Out"),
    Required(ErrorMessage = "Login Type required")]
    public int LoginType
    {
      get { return GetProperty(LoginTypeProperty); }
      set { SetProperty(LoginTypeProperty, value); }
    }

    public static PropertyInfo<bool> RefreshedRolesIndProperty = RegisterProperty<bool>(c => c.RefreshedRolesInd, "Refreshed Roles", false);
    /// <summary>
    /// Gets and sets the Refreshed Roles value
    /// </summary>
    [Display(Name = "Refreshed Roles", Description = ""),
    Required(ErrorMessage = "Refreshed Roles required")]
    public bool RefreshedRolesInd
    {
      get { return GetProperty(RefreshedRolesIndProperty); }
      set { SetProperty(RefreshedRolesIndProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(LoginAuditIDProperty);
    }

    public override string ToString()
    {
      if (this.MachineName.Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Login Audit");
        }
        else
        {
          return String.Format("Blank {0}", "Login Audit");
        }
      }
      else
      {
        return this.MachineName;
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewLoginAudit() method.
    }

    public static LoginAudit NewLoginAudit()
    {
      return DataPortal.CreateChild<LoginAudit>();
    }

    public LoginAudit()
    {
      MarkAsChild();
    }

    internal static LoginAudit GetLoginAudit(SafeDataReader dr)
    {
      var l = new LoginAudit();
      l.Fetch(dr);
      return l;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(LoginAuditIDProperty, sdr.GetInt32(i++));
        LoadProperty(UserIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
        LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
        LoadProperty(MachineNameProperty, sdr.GetString(i++));
        LoadProperty(WindowsNameProperty, sdr.GetString(i++));
        LoadProperty(LoginTypeProperty, sdr.GetInt32(i++));
        LoadProperty(RefreshedRolesIndProperty, sdr.GetBoolean(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      AddPrimaryKeyParam(cm, LoginAuditIDProperty);

      cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));
      cm.Parameters.AddWithValue("@MachineName", GetProperty(MachineNameProperty));
      cm.Parameters.AddWithValue("@WindowsName", GetProperty(WindowsNameProperty));
      cm.Parameters.AddWithValue("@LoginType", GetProperty(LoginTypeProperty));
      cm.Parameters.AddWithValue("@RefreshedRolesInd", GetProperty(RefreshedRolesIndProperty));

      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(LoginAuditIDProperty, scm.Parameters["@LoginAuditID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@LoginAuditID", GetProperty(LoginAuditIDProperty));
    }

    #endregion

  }

}