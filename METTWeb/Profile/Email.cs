// Generated 09 Apr 2024 11:36 - Singular Systems Object Generator Version 3.0.000
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using Singular.DataAnnotations;
using System.Data;
using System.Data.SqlClient;


namespace MEWeb.Movies
{
  [Serializable]
  public class Email
  : SingularBusinessBase<Email>
  {
    #region " Properties and Methods "

    #region " Properties "

    public static PropertyInfo<int> EmailIDProperty = RegisterProperty<int>(c => c.EmailID, "ID", 0);
    /// <summary>
    /// Gets the ID value
    /// </summary>
    [Display(AutoGenerateField = false), Key]
    public int EmailID
    {
      get { return GetProperty(EmailIDProperty); }
    }

    public static PropertyInfo<string> ToEmailAddressProperty = RegisterProperty<string>(c => c.ToEmailAddress, "To Email Address", "");
    /// <summary>
    /// Gets and sets the To Email Address value
    /// </summary>
    [Display(Name = "To Email Address", Description = "Email Address to which email should be sent"),
    StringLength(1000, ErrorMessage = "To Email Address cannot be more than 1000 characters")]
    public string ToEmailAddress
    {
      get { return GetProperty(ToEmailAddressProperty); }
      set { SetProperty(ToEmailAddressProperty, value); }
    }

    public static PropertyInfo<string> FromEmailAddressProperty = RegisterProperty<string>(c => c.FromEmailAddress, "From Email Address", "");
    /// <summary>
    /// Gets and sets the From Email Address value
    /// </summary>
    [Display(Name = "From Email Address", Description = "Email address of the sender"),
    StringLength(100, ErrorMessage = "From Email Address cannot be more than 100 characters")]
    public string FromEmailAddress
    {
      get { return GetProperty(FromEmailAddressProperty); }
      set { SetProperty(FromEmailAddressProperty, value); }
    }

    public static PropertyInfo<string> FriendlyFromProperty = RegisterProperty<string>(c => c.FriendlyFrom, "Friendly From", "");
    /// <summary>
    /// Gets and sets the Friendly From value
    /// </summary>
    [Display(Name = "Friendly From", Description = "Friendly name of sender"),
    StringLength(50, ErrorMessage = "Friendly From cannot be more than 50 characters")]
    public string FriendlyFrom
    {
      get { return GetProperty(FriendlyFromProperty); }
      set { SetProperty(FriendlyFromProperty, value); }
    }

    public static PropertyInfo<string> SubjectProperty = RegisterProperty<string>(c => c.Subject, "Subject", "");
    /// <summary>
    /// Gets and sets the Subject value
    /// </summary>
    [Display(Name = "Subject", Description = "Subject of Email"),
    StringLength(255, ErrorMessage = "Subject cannot be more than 255 characters")]
    public string Subject
    {
      get { return GetProperty(SubjectProperty); }
      set { SetProperty(SubjectProperty, value); }
    }

    public static PropertyInfo<string> BodyProperty = RegisterProperty<string>(c => c.Body, "Body", "");
    /// <summary>
    /// Gets and sets the Body value
    /// </summary>
    [Display(Name = "Body", Description = "Body of email")]
    public string Body
    {
      get { return GetProperty(BodyProperty); }
      set { SetProperty(BodyProperty, value); }
    }

    public static PropertyInfo<string> CCEmailAddressesProperty = RegisterProperty<string>(c => c.CCEmailAddresses, "CC Email Addresses", "");
    /// <summary>
    /// Gets and sets the CC Email Addresses value
    /// </summary>
    [Display(Name = "CC Email Addresses", Description = "Any other employees that email should be sent to"),
    StringLength(1000, ErrorMessage = "CC Email Addresses cannot be more than 1000 characters")]
    public string CCEmailAddresses
    {
      get { return GetProperty(CCEmailAddressesProperty); }
      set { SetProperty(CCEmailAddressesProperty, value); }
    }

    public static PropertyInfo<string> CreatedByProperty = RegisterProperty<string>(c => c.CreatedBy, "Created By");
    /// <summary>
    /// Gets the Created By value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public string CreatedBy
    {
      get { return GetProperty(CreatedByProperty); }
    }

    public static PropertyInfo<SmartDate> CreatedDateProperty = RegisterProperty<SmartDate>(c => c.CreatedDate, "Created Date");
    /// <summary>
    /// Gets the Created Date value
    /// </summary>
    [Display(AutoGenerateField = false)]
    public SmartDate CreatedDate
    {
      get { return GetProperty(CreatedDateProperty); }
    }

    public static PropertyInfo<DateTime?> DateToSendProperty = RegisterProperty<DateTime?>(c => c.DateToSend, "Date To Send", (DateTime?));
    /// <summary>
    /// Gets and sets the Date To Send value
    /// </summary>
    [Display(Name = "Date To Send", Description = "Date to send the email (will be 5 minutes after this date)")]
    public DateTime? DateToSend
    {
      get
      {
        return GetProperty(DateToSendProperty);
      }
      set
      {
        SetProperty(DateToSendProperty, value);
      }
    }

    public static PropertyInfo<DateTime?> SentDateProperty = RegisterProperty<DateTime?>(c => c.SentDate, "Sent Date", (DateTime?));
    /// <summary>
    /// Gets and sets the Sent Date value
    /// </summary>
    [Display(Name = "Sent Date", Description = "Date on which email was sent")]
    public DateTime? SentDate
    {
      get
      {
        return GetProperty(SentDateProperty);
      }
      set
      {
        SetProperty(SentDateProperty, value);
      }
    }

    public static PropertyInfo<string> NotSentErrorProperty = RegisterProperty<string>(c => c.NotSentError, "Not Sent Error", "");
    /// <summary>
    /// Gets and sets the Not Sent Error value
    /// </summary>
    [Display(Name = "Not Sent Error", Description = "Any errors encountered during sending"),
    StringLength(1024, ErrorMessage = "Not Sent Error cannot be more than 1024 characters")]
    public string NotSentError
    {
      get { return GetProperty(NotSentErrorProperty); }
      set { SetProperty(NotSentErrorProperty, value); }
    }

    public static PropertyInfo<bool> IgnoreProperty = RegisterProperty<bool>(c => c.Ignore, "Ignore", false);
    /// <summary>
    /// Gets and sets the Ignore value
    /// </summary>
    [Display(Name = "Ignore", Description = "Tick indicates that this email will be ignored"),
    Required(ErrorMessage = "Ignore required")]
    public bool Ignore
    {
      get { return GetProperty(IgnoreProperty); }
      set { SetProperty(IgnoreProperty, value); }
    }

    public static PropertyInfo<bool> BulkIndProperty = RegisterProperty<bool>(c => c.BulkInd, "Bulk", false);
    /// <summary>
    /// Gets and sets the Bulk value
    /// </summary>
    [Display(Name = "Bulk", Description = "Normal (BulkInd = false) emails will always be sent before bulk emails. Set to true if sending out a large batch of emails."),
    Required(ErrorMessage = "Bulk required")]
    public bool BulkInd
    {
      get { return GetProperty(BulkIndProperty); }
      set { SetProperty(BulkIndProperty, value); }
    }

    #endregion

    #region " Methods "

    protected override object GetIdValue()
    {
      return GetProperty(EmailIDProperty);
    }

    public override string ToString()
    {
      if (this.ToEmailAddress.Length == 0)
      {
        if (this.IsNew)
        {
          return String.Format("New {0}", "Email");
        }
        else
        {
          return String.Format("Blank {0}", "Email");
        }
      }
      else
      {
        return this.ToEmailAddress;
      }
    }

    #endregion

    #endregion

    #region " Validation Rules "

    protected override void AddBusinessRules()
    {
      base.AddBusinessRules();
    }

    #endregion

    #region " Data Access & Factory Methods "

    protected override void OnCreate()
    {
      // This is called when a new object is created
      // Set any variables here, not in the constructor or NewEmail() method.
    }

    public static Email NewEmail()
    {
      return DataPortal.CreateChild<Email>();
    }

    public Email()
    {
      MarkAsChild();
    }

    internal static Email GetEmail(SafeDataReader dr)
    {
      var e = new Email();
      e.Fetch(dr);
      return e;
    }

    protected void Fetch(SafeDataReader sdr)
    {
      using (BypassPropertyChecks)
      {
        int i = 0;
        LoadProperty(EmailIDProperty, sdr.GetInt32(i++));
        LoadProperty(ToEmailAddressProperty, sdr.GetString(i++));
        LoadProperty(FromEmailAddressProperty, sdr.GetString(i++));
        LoadProperty(FriendlyFromProperty, sdr.GetString(i++));
        LoadProperty(SubjectProperty, sdr.GetString(i++));
        LoadProperty(BodyProperty, sdr.GetString(i++));
        LoadProperty(CCEmailAddressesProperty, sdr.GetString(i++));
        LoadProperty(CreatedByProperty, sdr.GetString(i++));
        LoadProperty(CreatedDateProperty, sdr.GetSmartDate(i++));
        LoadProperty(DateToSendProperty, sdr.GetValue(i++));
        LoadProperty(SentDateProperty, sdr.GetValue(i++));
        LoadProperty(NotSentErrorProperty, sdr.GetString(i++));
        LoadProperty(IgnoreProperty, sdr.GetBoolean(i++));
        LoadProperty(BulkIndProperty, sdr.GetBoolean(i++));
      }

      MarkAsChild();
      MarkOld();
      BusinessRules.CheckRules();
    }

    protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
    {
      if (this.IsNew)
      {
        LoadProperty(CreatedByProperty, );
      }

      AddPrimaryKeyParam(cm, EmailIDProperty);

      cm.Parameters.AddWithValue("@ToEmailAddress", GetProperty(ToEmailAddressProperty));
      cm.Parameters.AddWithValue("@FromEmailAddress", GetProperty(FromEmailAddressProperty));
      cm.Parameters.AddWithValue("@FriendlyFrom", GetProperty(FriendlyFromProperty));
      cm.Parameters.AddWithValue("@Subject", GetProperty(SubjectProperty));
      cm.Parameters.AddWithValue("@Body", GetProperty(BodyProperty));
      cm.Parameters.AddWithValue("@CCEmailAddresses", GetProperty(CCEmailAddressesProperty));
      cm.Parameters.AddWithValue("@CreatedBy", GetProperty(CreatedByProperty));
      cm.Parameters.AddWithValue("@DateToSend", Singular.Misc.NothingDBNull(DateToSend));
      cm.Parameters.AddWithValue("@SentDate", Singular.Misc.NothingDBNull(SentDate));
      cm.Parameters.AddWithValue("@NotSentError", GetProperty(NotSentErrorProperty));
      cm.Parameters.AddWithValue("@Ignore", GetProperty(IgnoreProperty));
      cm.Parameters.AddWithValue("@BulkInd", GetProperty(BulkIndProperty));

      return (scm) =>
      {
        // Post Save
        if (this.IsNew)
        {
          LoadProperty(EmailIDProperty, scm.Parameters["@EmailID"].Value);
        }
      };
    }

    protected override void SaveChildren()
    {
      // No Children
    }

    protected override void SetupDeleteCommand(SqlCommand cm)
    {
      cm.Parameters.AddWithValue("@EmailID", GetProperty(EmailIDProperty));
    }

    #endregion

  }

}